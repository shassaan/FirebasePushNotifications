@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
<script src="https://www.gstatic.com/firebasejs/6.6.2/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/6.6.2/firebase-messaging.js"></script>
<script>


    var firebaseConfig = {
        apiKey: "AIzaSyDfxjnc_OaeBZC30SldW-hRZxq_waWmLFs",
        authDomain: "pushnotifications-55a84.firebaseapp.com",
        databaseURL: "https://pushnotifications-55a84.firebaseio.com",
        projectId: "pushnotifications-55a84",
        storageBucket: "pushnotifications-55a84.appspot.com",
        messagingSenderId: "1080865604556",
        appId: "1:1080865604556:web:64f2324160d5b325289369",
        measurementId: "G-E9DZHLJDE3"
    };
    // Initialize Firebase
    firebase.initializeApp(firebaseConfig);

    const messaging = firebase.messaging();
    messaging.usePublicVapidKey("BPs-TZW1k_6QSd29aSuDnE5zPBXYEUP3YIU13pXnYz5e-0W85ko3wjC79DjIy8QGHr3z-JmcJ6x_fLyNPzt-c0I");


    messaging.onTokenRefresh(() => {
        messaging.getToken().then((refreshedToken) => {
            console.log('Token refreshed.', refreshedToken);
            // Indicate that the new Instance ID token has not yet been sent to the
            // app server.
            //setTokenSentToServer(false);
            // Send Instance ID token to app server.
            // sendTokenToServer(refreshedToken);
            // ...
        }).catch((err) => {
            console.log('Unable to retrieve refreshed token ', err);
            //showToken('Unable to retrieve refreshed token ', err);
        });
    });
    messaging.onMessage((payload) => {
        console.log('Message received. ', payload);

        //Let's check if the browser supports notifications
        if (!("Notification" in window)) {
            alert("This browser does not support desktop notification");
        }

        // Let's check whether notification permissions have already been granted
        else if (Notification.permission === "granted") {
            // If it's okay let's create a notification
            var title = payload.notification.title;
            var body = payload.notification.body;
            // The notification works fine in FireFox but isnt working in Chorme it has to do something with chrome flags
            var notification = new Notification(title, {
                icon: payload.notification.image,
                body: body,
            });
            console.log("notification created");
        }

        // Otherwise, we need to ask the user for permission
        else if (Notification.permission !== "denied") {
            Notification.requestPermission().then(function (permission) {
                // If the user accepts, let's create a notification
                if (permission === "granted") {
                    var title = payload.notification.title;
                    var body = payload.notification.body;
                    var notification = new Notification(title, {
                        icon: payload.notification.image,
                        body: body,
                    });
                    console.log("notification created");
                }
            });
        }



        // ...
    });

    messaging.getToken().then((currentToken) => {
        if (currentToken) {
            console.log(currentToken);
            //sendTokenToServer(currentToken);
            //updateUIForPushEnabled(currentToken);
        } else {
            // Show permission request.
            console.log('No Instance ID token available. Request permission to generate one.');
            messaging.requestPermission()
                .then(function () {
                    console.log('Notification permission granted.');
                    // TODO(developer): Retrieve a Instance ID token for use with FCM.
                    // ...
                    messaging.getToken().then((token) => { console.log(currentToken); })
                })
                .catch(function (err) {
                    console.log('Unable to get permission to notify. ', err);
                });
            // Show permission UI.
            //updateUIForPushPermissionRequired();
            //setTokenSentToServer(false);
        }
    }).catch((err) => {
        console.log('An error occurred while retrieving token. ', err);
        showToken('Error retrieving Instance ID token. ', err);
        //setTokenSentToServer(false);
    });


</script>
